import requests
from Crypto.Util.number import inverse, long_to_bytes
import sympy

def factorize_n(N):
    factors = list(sympy.factorint(N).keys())
    if len(factors) == 2:
        return factors[0], factors[1]
    else:
        print("error")
        return None, None

N = 108800219649079967848432001170581686456331007357775578143199026520971720812183551373655436421598181626184993751323529640539733554073951489937784304980168672713607255071980553728491058363934396693579710763434797492213956839596363082538813142298139265576541487609898829835170041392500472231798584811000225570951
e = 3
ct = 3172061575576762412197702483943773184340772187606585769710021305346667105609011106551440617352552945477386947545491185539712474098107373816248473824192790126769870514771753653103276305438643455581711871135473295224402403387425769934282224620779279465546331406801612221132389

p, q = factorize_n(N)

if p and q:
    print(f"p: {p}")
    print(f"q: {q}")

    phi_n = (p - 1) * (q - 1)
    print(f"phi(n): {phi_n}")
    
    d = inverse(e, phi_n)
    print(f"private key d: {d}")
    
    M = pow(ct, d, N)
    flag = long_to_bytes(M).decode('utf-8', errors='ignore')
    print("decrypted flag:",flag)
else:
    print("problem")

